<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<article lang="en" id="gitnamespaces(7)">
<articleinfo>
    <title>gitnamespaces(7)</title>
<indexterm>
<primary>gitnamespaces(7)</primary>
</indexterm>
</articleinfo>
<simplesect id="_name">
<title>NAME</title>
<simpara>gitnamespaces - Git namespaces</simpara>
</simplesect>
<simplesect id="_synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout>GIT_NAMESPACE=&lt;namespace&gt; <emphasis>git upload-pack</emphasis>
GIT_NAMESPACE=&lt;namespace&gt; <emphasis>git receive-pack</emphasis></literallayout>
</blockquote>
</simplesect>
<simplesect id="_description">
<title>DESCRIPTION</title>
<simpara>Git supports dividing the refs of a single repository into multiple
namespaces, each of which has its own branches, tags, and HEAD.  Git can
expose each namespace as an independent repository to pull from and push
to, while sharing the object store, and exposing all the refs to
operations such as <xref linkend="git-gc(1)" />.</simpara>
<simpara>Storing multiple repositories as namespaces of a single repository
avoids storing duplicate copies of the same objects, such as when
storing multiple branches of the same source.  The alternates mechanism
provides similar support for avoiding duplicates, but alternates do not
prevent duplication between new objects added to the repositories
without ongoing maintenance, while namespaces do.</simpara>
<simpara>To specify a namespace, set the <emphasis>GIT_NAMESPACE</emphasis> environment variable to
the namespace.  For each ref namespace, git stores the corresponding
refs in a directory under <emphasis>refs/namespaces/</emphasis>.  For example,
<emphasis>GIT_NAMESPACE=foo</emphasis> will store refs under <emphasis>refs/namespaces/foo/</emphasis>.  You
can also specify namespaces via the <emphasis>--namespace</emphasis> option to
<xref linkend="git(1)" />.</simpara>
<simpara>Note that namespaces which include a <emphasis>/</emphasis> will expand to a hierarchy of
namespaces; for example, <emphasis>GIT_NAMESPACE=foo/bar</emphasis> will store refs under
<emphasis>refs/namespaces/foo/refs/namespaces/bar/</emphasis>.  This makes paths in
<emphasis>GIT_NAMESPACE</emphasis> behave hierarchically, so that cloning with
<emphasis>GIT_NAMESPACE=foo/bar</emphasis> produces the same result as cloning with
<emphasis>GIT_NAMESPACE=foo</emphasis> and cloning from that repo with <emphasis>GIT_NAMESPACE=bar</emphasis>.  It
also avoids ambiguity with strange namespace paths such as <emphasis>foo/refs/heads/</emphasis>,
which could otherwise generate directory/file conflicts within the <emphasis>refs</emphasis>
directory.</simpara>
<simpara><xref linkend="git-upload-pack(1)" /> and <xref linkend="git-receive-pack(1)" /> rewrite the
names of refs as specified by <emphasis>GIT_NAMESPACE</emphasis>.  git-upload-pack and
git-receive-pack will ignore all references outside the specified
namespace.</simpara>
<simpara>The smart HTTP server, <xref linkend="git-http-backend(1)" />, will pass
GIT_NAMESPACE through to the backend programs; see
<xref linkend="git-http-backend(1)" /> for sample configuration to expose
repository namespaces as repositories.</simpara>
<simpara>For a simple local test, you can use <xref linkend="git-remote-ext(1)" />:</simpara>
<screen>git clone ext::'git --namespace=foo %s /tmp/prefixed.git'</screen>
</simplesect>
<simplesect id="_security">
<title>SECURITY</title>
<simpara>Anyone with access to any namespace within a repository can potentially
access objects from any other namespace stored in the same repository.
You can't directly say "give me object ABCD" if you don't have a ref to
it, but you can do some other sneaky things like:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Claiming to push ABCD, at which point the server will optimize out the
  need for you to actually send it. Now you have a ref to ABCD and can
  fetch it (claiming not to have it, of course).
</simpara>
</listitem>
<listitem>
<simpara>
Requesting other refs, claiming that you have ABCD, at which point the
  server may generate deltas against ABCD.
</simpara>
</listitem>
</orderedlist>
<simpara>None of this causes a problem if you only host public repositories, or
if everyone who may read one namespace may also read everything in every
other namespace (for instance, if everyone in an organization has read
permission to every repository).</simpara>
</simplesect>
</article>
