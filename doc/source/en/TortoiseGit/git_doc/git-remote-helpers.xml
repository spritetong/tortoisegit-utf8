<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<article lang="en" id="git-remote-helpers(1)">
<articleinfo>
    <title>git-remote-helpers(1)</title>
<indexterm>
<primary>git-remote-helpers(1)</primary>
</indexterm>
</articleinfo>
<simplesect id="_name">
<title>NAME</title>
<simpara>git-remote-helpers - Helper programs to interact with remote repositories</simpara>
</simplesect>
<simplesect id="_synopsis">
<title>SYNOPSIS</title>
<blockquote>
<literallayout><emphasis>git remote-&lt;transport&gt;</emphasis> &lt;repository&gt; [&lt;URL&gt;]</literallayout>
</blockquote>
</simplesect>
<simplesect id="_description">
<title>DESCRIPTION</title>
<simpara>Remote helper programs are normally not used directly by end users,
but they are invoked by git when it needs to interact with remote
repositories git does not support natively.  A given helper will
implement a subset of the capabilities documented here. When git
needs to interact with a repository using a remote helper, it spawns
the helper as an independent process, sends commands to the helper's
standard input, and expects results from the helper's standard
output. Because a remote helper runs as an independent process from
git, there is no need to re-link git to add a new helper, nor any
need to link the helper with the implementation of git.</simpara>
<simpara>Every helper must support the "capabilities" command, which git
uses to determine what other commands the helper will accept.  Those
other commands can be used to discover and update remote refs,
transport objects between the object database and the remote repository,
and update the local object store.</simpara>
<simpara>Git comes with a "curl" family of remote helpers, that handle various
transport protocols, such as <emphasis>git-remote-http</emphasis>, <emphasis>git-remote-https</emphasis>,
<emphasis>git-remote-ftp</emphasis> and <emphasis>git-remote-ftps</emphasis>. They implement the capabilities
<emphasis>fetch</emphasis>, <emphasis>option</emphasis>, and <emphasis>push</emphasis>.</simpara>
</simplesect>
<simplesect id="_input_format">
<title>INPUT FORMAT</title>
<simpara>Git sends the remote helper a list of commands on standard input, one
per line.  The first command is always the <emphasis>capabilities</emphasis> command, in
response to which the remote helper must print a list of the
capabilities it supports (see below) followed by a blank line.  The
response to the capabilities command determines what commands Git uses
in the remainder of the command stream.</simpara>
<simpara>The command stream is terminated by a blank line.  In some cases
(indicated in the documentation of the relevant commands), this blank
line is followed by a payload in some other protocol (e.g., the pack
protocol), while in others it indicates the end of input.</simpara>
<section id="_capabilities">
<title>Capabilities</title>
<simpara>Each remote helper is expected to support only a subset of commands.
The operations a helper supports are declared to git in the response
to the <emphasis>capabilities</emphasis> command (see COMMANDS, below).</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>option</emphasis>
</term>
<listitem>
<simpara>
        For specifying settings like <emphasis>verbosity</emphasis> (how much output to
        write to stderr) and <emphasis>depth</emphasis> (how much history is wanted in the
        case of a shallow clone) that affect how other commands are
        carried out.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>connect</emphasis>
</term>
<listitem>
<simpara>
        For fetching and pushing using git's native packfile protocol
        that requires a bidirectional, full-duplex connection.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>push</emphasis>
</term>
<listitem>
<simpara>
        For listing remote refs and pushing specified objects from the
        local object store to remote refs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>fetch</emphasis>
</term>
<listitem>
<simpara>
        For listing remote refs and fetching the associated history to
        the local object store.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>import</emphasis>
</term>
<listitem>
<simpara>
        For listing remote refs and fetching the associated history as
        a fast-import stream.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>refspec</emphasis> &lt;refspec&gt;
</term>
<listitem>
<simpara>
        This modifies the <emphasis>import</emphasis> capability, allowing the produced
        fast-import stream to modify refs in a private namespace
        instead of writing to refs/heads or refs/remotes directly.
        It is recommended that all importers providing the <emphasis>import</emphasis>
        capability use this.
</simpara>
<simpara>A helper advertising the capability
<emphasis>refspec refs/heads/*:refs/svn/origin/branches/*</emphasis>
is saying that, when it is asked to <emphasis>import refs/heads/topic</emphasis>, the
stream it outputs will update the <emphasis>refs/svn/origin/branches/topic</emphasis>
ref.</simpara>
<simpara>This capability can be advertised multiple times.  The first
applicable refspec takes precedence.  The left-hand of refspecs
advertised with this capability must cover all refs reported by
the list command.  If no <emphasis>refspec</emphasis> capability is advertised,
there is an implied <emphasis>refspec *:*</emphasis>.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="_capabilities_for_pushing">
<title>Capabilities for Pushing</title>
<variablelist>
<varlistentry>
<term>
<emphasis>connect</emphasis>
</term>
<listitem>
<simpara>
        Can attempt to connect to <emphasis>git receive-pack</emphasis> (for pushing),
        <emphasis>git upload-pack</emphasis>, etc for communication using the
        packfile protocol.
</simpara>
<simpara>Supported commands: <emphasis>connect</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>push</emphasis>
</term>
<listitem>
<simpara>
        Can discover remote refs and push local commits and the
        history leading up to them to new or existing remote refs.
</simpara>
<simpara>Supported commands: <emphasis>list for-push</emphasis>, <emphasis>push</emphasis>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>If a helper advertises both <emphasis>connect</emphasis> and <emphasis>push</emphasis>, git will use
<emphasis>connect</emphasis> if possible and fall back to <emphasis>push</emphasis> if the helper requests
so when connecting (see the <emphasis>connect</emphasis> command under COMMANDS).</simpara>
</section>
<section id="_capabilities_for_fetching">
<title>Capabilities for Fetching</title>
<variablelist>
<varlistentry>
<term>
<emphasis>connect</emphasis>
</term>
<listitem>
<simpara>
        Can try to connect to <emphasis>git upload-pack</emphasis> (for fetching),
        <emphasis>git receive-pack</emphasis>, etc for communication using the
        packfile protocol.
</simpara>
<simpara>Supported commands: <emphasis>connect</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>fetch</emphasis>
</term>
<listitem>
<simpara>
        Can discover remote refs and transfer objects reachable from
        them to the local object store.
</simpara>
<simpara>Supported commands: <emphasis>list</emphasis>, <emphasis>fetch</emphasis>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>import</emphasis>
</term>
<listitem>
<simpara>
        Can discover remote refs and output objects reachable from
        them as a stream in fast-import format.
</simpara>
<simpara>Supported commands: <emphasis>list</emphasis>, <emphasis>import</emphasis>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>If a helper advertises <emphasis>connect</emphasis>, git will use it if possible and
fall back to another capability if the helper requests so when
connecting (see the <emphasis>connect</emphasis> command under COMMANDS).
When choosing between <emphasis>fetch</emphasis> and <emphasis>import</emphasis>, git prefers <emphasis>fetch</emphasis>.
Other frontends may have some other order of preference.</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>refspec</emphasis> &lt;refspec&gt;
</term>
<listitem>
<simpara>
        This modifies the <emphasis>import</emphasis> capability.
</simpara>
<simpara>A helper advertising
<emphasis>refspec refs/heads/*:refs/svn/origin/branches/*</emphasis>
in its capabilities is saying that, when it handles
<emphasis>import refs/heads/topic</emphasis>, the stream it outputs will update the
<emphasis>refs/svn/origin/branches/topic</emphasis> ref.</simpara>
<simpara>This capability can be advertised multiple times.  The first
applicable refspec takes precedence.  The left-hand of refspecs
advertised with this capability must cover all refs reported by
the list command.  If no <emphasis>refspec</emphasis> capability is advertised,
there is an implied <emphasis>refspec *:*</emphasis>.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</simplesect>
<simplesect id="_invocation">
<title>INVOCATION</title>
<simpara>Remote helper programs are invoked with one or (optionally) two
arguments. The first argument specifies a remote repository as in git;
it is either the name of a configured remote or a URL. The second
argument specifies a URL; it is usually of the form
<emphasis>&lt;transport&gt;://&lt;address&gt;</emphasis>, but any arbitrary string is possible.
The <emphasis>GIT_DIR</emphasis> environment variable is set up for the remote helper
and can be used to determine where to store additional data or from
which directory to invoke auxiliary git commands.</simpara>
<simpara>When git encounters a URL of the form <emphasis>&lt;transport&gt;://&lt;address&gt;</emphasis>, where
<emphasis>&lt;transport&gt;</emphasis> is a protocol that it cannot handle natively, it
automatically invokes <emphasis>git remote-&lt;transport&gt;</emphasis> with the full URL as
the second argument. If such a URL is encountered directly on the
command line, the first argument is the same as the second, and if it
is encountered in a configured remote, the first argument is the name
of that remote.</simpara>
<simpara>A URL of the form <emphasis>&lt;transport&gt;::&lt;address&gt;</emphasis> explicitly instructs git to
invoke <emphasis>git remote-&lt;transport&gt;</emphasis> with <emphasis>&lt;address&gt;</emphasis> as the second
argument. If such a URL is encountered directly on the command line,
the first argument is <emphasis>&lt;address&gt;</emphasis>, and if it is encountered in a
configured remote, the first argument is the name of that remote.</simpara>
<simpara>Additionally, when a configured remote has <emphasis>remote.&lt;name&gt;.vcs</emphasis> set to
<emphasis>&lt;transport&gt;</emphasis>, git explicitly invokes <emphasis>git remote-&lt;transport&gt;</emphasis> with
<emphasis>&lt;name&gt;</emphasis> as the first argument. If set, the second argument is
<emphasis>remote.&lt;name&gt;.url</emphasis>; otherwise, the second argument is omitted.</simpara>
</simplesect>
<simplesect id="_commands">
<title>COMMANDS</title>
<simpara>Commands are given by the caller on the helper's standard input, one per line.</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>capabilities</emphasis>
</term>
<listitem>
<simpara>
        Lists the capabilities of the helper, one per line, ending
        with a blank line. Each capability may be preceded with <emphasis>*</emphasis>,
        which marks them mandatory for git version using the remote
        helper to understand (unknown mandatory capability is fatal
        error).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>list</emphasis>
</term>
<listitem>
<simpara>
        Lists the refs, one per line, in the format "&lt;value&gt; &lt;name&gt;
        [&lt;attr&gt; &#8230;]". The value may be a hex sha1 hash, "@&lt;dest&gt;" for
        a symref, or "?" to indicate that the helper could not get the
        value of the ref. A space-separated list of attributes follows
        the name; unrecognized attributes are ignored. The list ends
        with a blank line.
</simpara>
<simpara>If <emphasis>push</emphasis> is supported this may be called as <emphasis>list for-push</emphasis>
to obtain the current refs prior to sending one or more <emphasis>push</emphasis>
commands to the helper.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>option</emphasis> &lt;name&gt; &lt;value&gt;
</term>
<listitem>
<simpara>
        Sets the transport helper option &lt;name&gt; to &lt;value&gt;.  Outputs a
        single line containing one of <emphasis>ok</emphasis> (option successfully set),
        <emphasis>unsupported</emphasis> (option not recognized) or <emphasis>error &lt;msg&gt;</emphasis>
        (option &lt;name&gt; is supported but &lt;value&gt; is not valid
        for it).  Options should be set before other commands,
        and may influence the behavior of those commands.
</simpara>
<simpara>Supported if the helper has the "option" capability.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>fetch</emphasis> &lt;sha1&gt; &lt;name&gt;
</term>
<listitem>
<simpara>
        Fetches the given object, writing the necessary objects
        to the database.  Fetch commands are sent in a batch, one
        per line, terminated with a blank line.
        Outputs a single blank line when all fetch commands in the
        same batch are complete. Only objects which were reported
        in the ref list with a sha1 may be fetched this way.
</simpara>
<simpara>Optionally may output a <emphasis>lock &lt;file&gt;</emphasis> line indicating a file under
GIT_DIR/objects/pack which is keeping a pack until refs can be
suitably updated.</simpara>
<simpara>Supported if the helper has the "fetch" capability.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>push</emphasis> +&lt;src&gt;:&lt;dst&gt;
</term>
<listitem>
<simpara>
        Pushes the given local &lt;src&gt; commit or branch to the
        remote branch described by &lt;dst&gt;.  A batch sequence of
        one or more <emphasis>push</emphasis> commands is terminated with a blank line
        (if there is only one reference to push, a single <emphasis>push</emphasis> command
        is followed by a blank line). For example, the following would
        be two batches of <emphasis>push</emphasis>, the first asking the remote-helper
        to push the local ref <emphasis>master</emphasis> to the remote ref <emphasis>master</emphasis> and
        the local <emphasis>HEAD</emphasis> to the remote <emphasis>branch</emphasis>, and the second
        asking to push ref <emphasis>foo</emphasis> to ref <emphasis>bar</emphasis> (forced update requested
        by the <emphasis>+</emphasis>).
</simpara>
<screen>push refs/heads/master:refs/heads/master
push HEAD:refs/heads/branch
\n
push +refs/heads/foo:refs/heads/bar
\n</screen>
<simpara>Zero or more protocol options may be entered after the last <emphasis>push</emphasis>
command, before the batch's terminating blank line.</simpara>
<simpara>When the push is complete, outputs one or more <emphasis>ok &lt;dst&gt;</emphasis> or
<emphasis>error &lt;dst&gt; &lt;why&gt;?</emphasis> lines to indicate success or failure of
each pushed ref.  The status report output is terminated by
a blank line.  The option field &lt;why&gt; may be quoted in a C
style string if it contains an LF.</simpara>
<simpara>Supported if the helper has the "push" capability.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>import</emphasis> &lt;name&gt;
</term>
<listitem>
<simpara>
        Produces a fast-import stream which imports the current value
        of the named ref. It may additionally import other refs as
        needed to construct the history efficiently. The script writes
        to a helper-specific private namespace. The value of the named
        ref should be written to a location in this namespace derived
        by applying the refspecs from the "refspec" capability to the
        name of the ref.
</simpara>
<simpara>Especially useful for interoperability with a foreign versioning
system.</simpara>
<simpara>Just like <emphasis>push</emphasis>, a batch sequence of one or more <emphasis>import</emphasis> is
terminated with a blank line. For each batch of <emphasis>import</emphasis>, the remote
helper should produce a fast-import stream terminated by a <emphasis>done</emphasis>
command.</simpara>
<simpara>Supported if the helper has the "import" capability.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>connect</emphasis> &lt;service&gt;
</term>
<listitem>
<simpara>
        Connects to given service. Standard input and standard output
        of helper are connected to specified service (git prefix is
        included in service name so e.g. fetching uses <emphasis>git-upload-pack</emphasis>
        as service) on remote side. Valid replies to this command are
        empty line (connection established), <emphasis>fallback</emphasis> (no smart
        transport support, fall back to dumb transports) and just
        exiting with error message printed (can't connect, don't
        bother trying to fall back). After line feed terminating the
        positive (empty) response, the output of service starts. After
        the connection ends, the remote helper exits.
</simpara>
<simpara>Supported if the helper has the "connect" capability.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>If a fatal error occurs, the program writes the error message to
stderr and exits. The caller should expect that a suitable error
message has been printed if the child closes the connection without
completing a valid response for the current command.</simpara>
<simpara>Additional commands may be supported, as may be determined from
capabilities reported by the helper.</simpara>
</simplesect>
<simplesect id="_ref_list_attributes">
<title>REF LIST ATTRIBUTES</title>
<variablelist>
<varlistentry>
<term>
<emphasis>for-push</emphasis>
</term>
<listitem>
<simpara>
        The caller wants to use the ref list to prepare push
        commands.  A helper might chose to acquire the ref list by
        opening a different type of connection to the destination.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>unchanged</emphasis>
</term>
<listitem>
<simpara>
        This ref is unchanged since the last import or fetch, although
        the helper cannot necessarily determine what value that produced.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
<emphasis>option verbosity</emphasis> &lt;n&gt;
</term>
<listitem>
<simpara>
        Changes the verbosity of messages displayed by the helper.
        A value of 0 for &lt;n&gt; means that processes operate
        quietly, and the helper produces only error output.
        1 is the default level of verbosity, and higher values
        of &lt;n&gt; correspond to the number of -v flags passed on the
        command line.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>option progress</emphasis> {<emphasis>true</emphasis>|<emphasis>false</emphasis>}
</term>
<listitem>
<simpara>
        Enables (or disables) progress messages displayed by the
        transport helper during a command.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>option depth</emphasis> &lt;depth&gt;
</term>
<listitem>
<simpara>
        Deepens the history of a shallow repository.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis>option followtags</emphasis> {<emphasis>true</emphasis>|<emphasis>false</emphasis>}
</term>
<listitem>
<simpara>
        If enabled the helper should automatically fetch annotated
        tag objects if the object the tag points at was transferred
        during the fetch command.  If the tag is not fetched by
        the helper a second fetch command will usually be sent to
        ask for the tag specifically.  Some helpers may be able to
        use this option to avoid a second network connection.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara><emphasis>option dry-run</emphasis> {<emphasis>true</emphasis>|<emphasis>false</emphasis>}:
        If true, pretend the operation completed successfully,
        but don't actually change any repository data.  For most
        helpers this only applies to the <emphasis>push</emphasis>, if supported.</simpara>
<variablelist>
<varlistentry>
<term>
<emphasis>option servpath &lt;c-style-quoted-path&gt;</emphasis>
</term>
<listitem>
<simpara>
        Sets service path (--upload-pack, --receive-pack etc.) for
        next connect. Remote helper may support this option, but
        must not rely on this option being set before
        connect request occurs.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="_see_also">
<title>SEE ALSO</title>
<simpara><xref linkend="git-remote(1)" /></simpara>
<simpara><xref linkend="git-remote-testgit(1)" /></simpara>
</simplesect>
<simplesect id="_git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</article>
