<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<article lang="en" id="gitcredentials(7)">
<articleinfo>
    <title>gitcredentials(7)</title>
<indexterm>
<primary>gitcredentials(7)</primary>
</indexterm>
</articleinfo>
<simplesect id="_name">
<title>NAME</title>
<simpara>gitcredentials - providing usernames and passwords to git</simpara>
</simplesect>
<simplesect id="_synopsis">
<title>SYNOPSIS</title>
<screen>git config credential.https://example.com.username myusername
git config credential.helper "$helper $options"</screen>
</simplesect>
<simplesect id="_description">
<title>DESCRIPTION</title>
<simpara>Git will sometimes need credentials from the user in order to perform
operations; for example, it may need to ask for a username and password
in order to access a remote repository over HTTP. This manual describes
the mechanisms git uses to request these credentials, as well as some
features to avoid inputting these credentials repeatedly.</simpara>
</simplesect>
<simplesect id="_requesting_credentials">
<title>REQUESTING CREDENTIALS</title>
<simpara>Without any credential helpers defined, git will try the following
strategies to ask the user for usernames and passwords:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
If the <emphasis>GIT_ASKPASS</emphasis> environment variable is set, the program
   specified by the variable is invoked. A suitable prompt is provided
   to the program on the command line, and the user's input is read
   from its standard output.
</simpara>
</listitem>
<listitem>
<simpara>
Otherwise, if the <emphasis>core.askpass</emphasis> configuration variable is set, its
   value is used as above.
</simpara>
</listitem>
<listitem>
<simpara>
Otherwise, if the <emphasis>SSH_ASKPASS</emphasis> environment variable is set, its
   value is used as above.
</simpara>
</listitem>
<listitem>
<simpara>
Otherwise, the user is prompted on the terminal.
</simpara>
</listitem>
</orderedlist>
</simplesect>
<simplesect id="_avoiding_repetition">
<title>AVOIDING REPETITION</title>
<simpara>It can be cumbersome to input the same credentials over and over.  Git
provides two methods to reduce this annoyance:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Static configuration of usernames for a given authentication context.
</simpara>
</listitem>
<listitem>
<simpara>
Credential helpers to cache or store passwords, or to interact with
   a system password wallet or keychain.
</simpara>
</listitem>
</orderedlist>
<simpara>The first is simple and appropriate if you do not have secure storage available
for a password. It is generally configured by adding this to your config:</simpara>
<screen>[credential "https://example.com"]
        username = me</screen>
<simpara>Credential helpers, on the other hand, are external programs from which git can
request both usernames and passwords; they typically interface with secure
storage provided by the OS or other programs.</simpara>
<simpara>To use a helper, you must first select one to use. Git currently
includes the following helpers:</simpara>
<variablelist>
<varlistentry>
<term>
cache
</term>
<listitem>
<simpara>
        Cache credentials in memory for a short period of time. See
        <xref linkend="git-credential-cache(1)" /> for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
store
</term>
<listitem>
<simpara>
        Store credentials indefinitely on disk. See
        <xref linkend="git-credential-store(1)" /> for details.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>You may also have third-party helpers installed; search for
<emphasis>credential-*</emphasis> in the output of <emphasis>git help -a</emphasis>, and consult the
documentation of individual helpers.  Once you have selected a helper,
you can tell git to use it by putting its name into the
credential.helper variable.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Find a helper.
</simpara>
<screen>$ git help -a | grep credential-
credential-foo</screen>
</listitem>
<listitem>
<simpara>
Read its description.
</simpara>
<screen>$ git help credential-foo</screen>
</listitem>
<listitem>
<simpara>
Tell git to use it.
</simpara>
<screen>$ git config --global credential.helper foo</screen>
</listitem>
</orderedlist>
<simpara>If there are multiple instances of the <emphasis>credential.helper</emphasis> configuration
variable, each helper will be tried in turn, and may provide a username,
password, or nothing. Once git has acquired both a username and a
password, no more helpers will be tried.</simpara>
</simplesect>
<simplesect id="_credential_contexts">
<title>CREDENTIAL CONTEXTS</title>
<simpara>Git considers each credential to have a context defined by a URL. This context
is used to look up context-specific configuration, and is passed to any
helpers, which may use it as an index into secure storage.</simpara>
<simpara>For instance, imagine we are accessing <emphasis>https://example.com/foo.git</emphasis>. When git
looks into a config file to see if a section matches this context, it will
consider the two a match if the context is a more-specific subset of the
pattern in the config file. For example, if you have this in your config file:</simpara>
<screen>[credential "https://example.com"]
        username = foo</screen>
<simpara>then we will match: both protocols are the same, both hosts are the same, and
the "pattern" URL does not care about the path component at all. However, this
context would not match:</simpara>
<screen>[credential "https://kernel.org"]
        username = foo</screen>
<simpara>because the hostnames differ. Nor would it match <emphasis>foo.example.com</emphasis>; git
compares hostnames exactly, without considering whether two hosts are part of
the same domain. Likewise, a config entry for <emphasis>http://example.com</emphasis> would not
match: git compares the protocols exactly.</simpara>
</simplesect>
<simplesect id="_configuration_options">
<title>CONFIGURATION OPTIONS</title>
<simpara>Options for a credential context can be configured either in
<emphasis>credential.*</emphasis> (which applies to all credentials), or
<emphasis>credential.&lt;url&gt;.*</emphasis>, where &lt;url&gt; matches the context as described
above.</simpara>
<simpara>The following options are available in either location:</simpara>
<variablelist>
<varlistentry>
<term>
helper
</term>
<listitem>
<simpara>
        The name of an external credential helper, and any associated options.
        If the helper name is not an absolute path, then the string <emphasis>git
        credential-</emphasis> is prepended. The resulting string is executed by the
        shell (so, for example, setting this to <emphasis>foo --option=bar</emphasis> will execute
        <emphasis>git credential-foo --option=bar</emphasis> via the shell. See the manual of
        specific helpers for examples of their use.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
username
</term>
<listitem>
<simpara>
        A default username, if one is not provided in the URL.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
useHttpPath
</term>
<listitem>
<simpara>
        By default, git does not consider the "path" component of an http URL
        to be worth matching via external helpers. This means that a credential
        stored for <emphasis>https://example.com/foo.git</emphasis> will also be used for
        <emphasis>https://example.com/bar.git</emphasis>. If you do want to distinguish these
        cases, set this option to <emphasis>true</emphasis>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</simplesect>
<simplesect id="_custom_helpers">
<title>CUSTOM HELPERS</title>
<simpara>You can write your own custom helpers to interface with any system in
which you keep credentials. See the documentation for git's
link:technical/api-credentials.html[credentials API] for details.</simpara>
</simplesect>
<simplesect id="_git">
<title>GIT</title>
<simpara>Part of the <xref linkend="git(1)" /> suite</simpara>
</simplesect>
</article>
